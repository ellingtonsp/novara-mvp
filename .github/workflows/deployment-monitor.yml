name: Deployment Health Monitor

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main, staging]
    paths:
      - 'scripts/deployment-monitor.js'
      - '.github/workflows/deployment-monitor.yml'

jobs:
  monitor-deployments:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run deployment health check
        id: health-check
        run: |
          echo "Running deployment health check..."
          node scripts/deployment-monitor.js --once
          
      - name: Check for failures
        id: check-failures
        run: |
          # Check if there are any alerts in the log
          if grep -q "🚨 ALERT" logs/deployment-monitor.log; then
            echo "::error::Deployment failures detected!"
            echo "failures=true" >> $GITHUB_OUTPUT
          else
            echo "failures=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload monitoring logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-monitor-logs
          path: logs/
          retention-days: 7
          
      - name: Create issue for failures
        if: steps.check-failures.outputs.failures == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the latest log entries
            let logContent = '';
            try {
              logContent = fs.readFileSync('logs/deployment-monitor.log', 'utf8');
              // Get last 50 lines
              const lines = logContent.split('\n').slice(-50);
              logContent = lines.join('\n');
            } catch (error) {
              logContent = 'Unable to read log file';
            }
            
            // Create issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Deployment Health Alert - Automated Monitoring',
              body: `## Deployment Health Alert

**Time:** ${new Date().toISOString()}
**Workflow:** ${context.workflow}
**Run:** ${context.runId}

### Recent Log Entries:
\`\`\`
${logContent}
\`\`\`

### Next Steps:
1. Check the deployment logs for specific errors
2. Verify environment variables are correctly set
3. Check Railway and Vercel deployment status
4. Review recent code changes that might have caused the issue

### Quick Links:
- [Railway Dashboard](https://railway.app/dashboard)
- [Vercel Dashboard](https://vercel.com/dashboard)
- [GitHub Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)

---
*This issue was automatically created by the deployment monitoring system.*`,
              labels: ['deployment-alert', 'automated', 'high-priority']
            });
            
            console.log(`Created issue #${issue.data.number} for deployment alert`);
            
      - name: Send Slack notification (if configured)
        if: steps.check-failures.outputs.failures == 'true' && env.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ env.SLACK_WEBHOOK_URL }}
          text: |
            🚨 *Deployment Health Alert*
            
            Environment failures detected in Novara MVP deployment monitoring.
            
            Check the GitHub Actions run for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
      - name: Update deployment status
        if: always()
        run: |
          # Create a deployment status summary
          echo "## Deployment Health Summary" > deployment-status.md
          echo "" >> deployment-status.md
          echo "**Last Check:** $(date -u)" >> deployment-status.md
          echo "**Status:** ${{ steps.check-failures.outputs.failures == 'true' && '❌ Issues Detected' || '✅ All Healthy' }}" >> deployment-status.md
          echo "" >> deployment-status.md
          
          if [ -f logs/deployment-status.json ]; then
            echo "### Environment Status:" >> deployment-status.md
            cat logs/deployment-status.json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.overall)"' >> deployment-status.md
          fi
          
          echo "" >> deployment-status.md
          echo "---" >> deployment-status.md
          echo "*Generated by automated deployment monitoring*" >> deployment-status.md 