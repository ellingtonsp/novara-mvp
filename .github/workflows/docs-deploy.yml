name: Documentation Deployment

on:
  push:
    branches: [develop]
    paths:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - main

jobs:
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if documentation only
        id: check_docs
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For push events, check the commits
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
          else
            # For manual dispatch, check diff with target branch
            git fetch origin ${{ inputs.target_branch }}
            CHANGED_FILES=$(git diff --name-only origin/${{ inputs.target_branch }}...HEAD)
          fi
          
          IS_DOCS_ONLY=true
          for file in $CHANGED_FILES; do
            if [[ ! "$file" =~ \.(md|MD)$ ]] && [[ ! "$file" =~ ^docs/ ]]; then
              IS_DOCS_ONLY=false
              break
            fi
          done
          
          echo "is_docs_only=$IS_DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "Documentation only: $IS_DOCS_ONLY"
      
      - name: Fast track to staging
        if: |
          steps.check_docs.outputs.is_docs_only == 'true' &&
          github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Create a PR to staging
          PR_RESPONSE=$(gh pr create \
            --base staging \
            --head develop \
            --title "ðŸ“š Docs: $COMMIT_MSG" \
            --body "## Documentation Fast Track
            
            This PR contains only documentation changes from develop.
            
            ### Changes
            - Documentation updates only
            - No code changes
            - Safe for immediate deployment
            
            ### Auto-merge enabled
            This PR will be automatically merged after checks pass.
            
            ðŸ¤– Generated by Documentation Deployment workflow" \
            --label "documentation,auto-merge" \
            2>&1) || true
          
          # Extract PR number
          if [[ "$PR_RESPONSE" =~ pull/([0-9]+) ]]; then
            PR_NUMBER="${BASH_REMATCH[1]}"
            echo "Created PR #$PR_NUMBER"
            
            # Enable auto-merge
            gh pr merge $PR_NUMBER --auto --merge
          fi
      
      - name: Deploy to production
        if: |
          steps.check_docs.outputs.is_docs_only == 'true' &&
          github.event_name == 'workflow_dispatch' &&
          inputs.target_branch == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR from staging to main
          PR_RESPONSE=$(gh pr create \
            --base main \
            --head staging \
            --title "ðŸ“š Deploy docs to production" \
            --body "## Documentation Production Deployment
            
            Fast-tracking documentation from staging to production.
            
            ### Verification
            - âœ… Documentation only
            - âœ… Verified in staging
            - âœ… Ready for production
            
            ðŸ¤– Generated by Documentation Deployment workflow" \
            --label "documentation,production,auto-merge" \
            2>&1) || true
          
          # Extract PR number and enable auto-merge
          if [[ "$PR_RESPONSE" =~ pull/([0-9]+) ]]; then
            PR_NUMBER="${BASH_REMATCH[1]}"
            echo "Created PR #$PR_NUMBER"
            gh pr merge $PR_NUMBER --auto --merge
          fi