name: BugBot Integration

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  workflow_run:
    workflows: ["CI/CD Pipeline", "Essential Monitoring"]
    types: [completed]

jobs:
  bugbot-monitor:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run BugBot Analysis
        run: |
          echo "🔍 BugBot analyzing deployment for issues..."
          
          # Check for common failure patterns
          if [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]]; then
            echo "🚨 Deployment failed - creating bug report..."
            
            # Analyze the failed workflow
            WORKFLOW_ID="${{ github.event.workflow_run.id }}"
            echo "Failed workflow ID: $WORKFLOW_ID"
            
            # Create bug report
            cat > bugbot-report.md << EOF
            # 🐛 BugBot Report - Deployment Failure
            
            **Date:** $(date -u)
            **Workflow:** ${{ github.event.workflow_run.name }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            
            ## 🔍 Analysis
            
            ### Failure Context
            - **Workflow ID:** $WORKFLOW_ID
            - **Trigger:** ${{ github.event_name }}
            - **Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            
            ### Common Issues to Check
            1. **Environment Variables** - Missing or incorrect config
            2. **Database Connectivity** - Airtable API issues
            3. **Build Failures** - Frontend/backend compilation errors
            4. **Deployment Timeouts** - Railway/Vercel issues
            5. **Test Failures** - Unit/integration test problems
            
            ### Recommended Actions
            1. Check Railway dashboard for deployment logs
            2. Verify environment variables in staging/production
            3. Run local tests: \`npm run test:local\`
            4. Check Airtable connectivity: \`node scripts/test-airtable-schema.js\`
            5. Validate deployment scripts: \`./scripts/deploy-staging-automated.sh\`
            
            ### Quick Fix Commands
            \`\`\`bash
            # Test staging environment
            curl -s https://novara-staging-staging.up.railway.app/api/health
            
            # Test production environment  
            curl -s https://novara-mvp-production.up.railway.app/api/health
            
            # Run comprehensive tests
            node test-comprehensive-e2e-flow-fixed.js
            \`\`\`
            
            ---
            *Report generated by BugBot Integration*
            EOF
            
            echo "📝 Bug report created: bugbot-report.md"
          fi
        continue-on-error: true
        
      - name: Create GitHub Issue
        if: github.event.workflow_run.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('bugbot-report.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🐛 BugBot: ${context.event.workflow_run.name} deployment failed`,
              body: report,
              labels: ['bug', 'deployment', 'bugbot'],
              assignees: ['ellingtonsp']
            });
            
            console.log(`Issue created: ${issue.data.html_url}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bugbot-runtime-monitor:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Essential Monitoring'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Runtime Health Check
        run: |
          echo "🔍 BugBot monitoring runtime health..."
          
          # Check production health
          PROD_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://novara-mvp-production.up.railway.app/api/health || echo "000")
          STAGING_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://novara-staging-staging.up.railway.app/api/health || echo "000")
          FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://novara-mvp.vercel.app || echo "000")
          
          echo "Production: $PROD_HEALTH"
          echo "Staging: $STAGING_HEALTH" 
          echo "Frontend: $FRONTEND_HEALTH"
          
          # Create runtime report if issues detected
          if [[ "$PROD_HEALTH" != "200" || "$STAGING_HEALTH" != "200" || "$FRONTEND_HEALTH" != "200" ]]; then
            cat > runtime-report.md << EOF
            # 🚨 BugBot Runtime Alert
            
            **Date:** $(date -u)
            **Environment Status:**
            - Production: $PROD_HEALTH
            - Staging: $STAGING_HEALTH  
            - Frontend: $FRONTEND_HEALTH
            
            ## 🚨 Issues Detected
            
            $(if [[ "$PROD_HEALTH" != "200" ]]; then echo "- ❌ Production API is down (HTTP $PROD_HEALTH)"; fi)
            $(if [[ "$STAGING_HEALTH" != "200" ]]; then echo "- ❌ Staging API is down (HTTP $STAGING_HEALTH)"; fi)
            $(if [[ "$FRONTEND_HEALTH" != "200" ]]; then echo "- ❌ Frontend is down (HTTP $FRONTEND_HEALTH)"; fi)
            
            ## 🔧 Immediate Actions
            1. Check Railway dashboard for service status
            2. Verify Vercel deployment status
            3. Check environment variables and secrets
            4. Review recent deployment logs
            
            ## 📊 Health Check Commands
            \`\`\`bash
            # Production health
            curl -v https://novara-mvp-production.up.railway.app/api/health
            
            # Staging health
            curl -v https://novara-staging-staging.up.railway.app/api/health
            
            # Frontend health
            curl -v https://novara-mvp.vercel.app
            \`\`\`
            
            ---
            *Alert generated by BugBot Runtime Monitor*
            EOF
            
            echo "📝 Runtime report created: runtime-report.md"
          fi
        continue-on-error: true
        
      - name: Create Runtime Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('runtime-report.md')) {
              const report = fs.readFileSync('runtime-report.md', 'utf8');
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 BugBot: Runtime health issues detected',
                body: report,
                labels: ['bug', 'runtime', 'bugbot', 'urgent'],
                assignees: ['ellingtonsp']
              });
              
              console.log(`Runtime issue created: ${issue.data.html_url}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 