---
description: Available automation scripts and npm commands
globs: ["scripts/**/*.sh", "scripts/**/*.js", "package.json"]
alwaysApply: false
---

# Automation & Scripts

## Available Scripts (npm run)
```bash
# Development
start-dev-stable    # Start local dev with stable ports (4200/9002)
start-local         # Quick local start
kill-local-servers  # Clean shutdown of local servers

# Testing & Validation
test                # Run quick test suite (no hanging, ~10 seconds)
test:fast           # Ultra-fast tests (backend + frontend build, ~7 seconds)
test:full           # Run full test suite (frontend + backend)
health-check        # Comprehensive environment health check
validate-environments # Validate all environment configurations
validate-schema     # Validate Airtable schema
safety:check        # Run all safety checks

# üèóÔ∏è BUILD ERROR PREVENTION
pre-deploy:build    # Test frontend build locally
pre-deploy:typescript # Validate TypeScript compilation
pre-deploy:full     # Complete pre-deployment validation
validate:environments # Validate environment variables
validate:deployment # Validate deployment scripts
sync:env-examples   # Sync environment variable examples

# BugBot Integration
bugbot:local        # Check local development environment
bugbot:pre-deploy   # Comprehensive pre-deployment validation
bugbot:post-deploy  # Post-deployment validation for staging/production
bugbot:monitor      # Local checks + continuous monitoring

# Monitoring & Performance
performance         # Performance monitoring and analysis
monitor:deployments # Track deployment status
track:deployments   # Monitor deployment metrics

# Documentation
docs:generate       # Generate feature documentation
docs:validate       # Validate documentation completeness
```

## Key Automation Scripts

### Development Scripts
- `./scripts/start-dev-stable.sh` - Stable port development environment
- `./scripts/fix-local-dev.sh` - Fix common local development issues
- `./scripts/macos-port-manager.sh` - macOS-specific port management

### Testing Scripts
- `./scripts/test-quick.js` - Comprehensive test suite with timeouts
- `./scripts/test-staging-enhanced-logging.js` - Staging environment testing
- `./scripts/test-production-fix.js` - Production environment testing

### üèóÔ∏è Build Error Prevention Scripts
- `./scripts/validate-environment-config.js` - Environment variable validation
- `./scripts/validate-deployment-scripts.sh` - Deployment script validation
- `./scripts/test-docker-build.sh` - Local Docker build testing
- `./scripts/emergency-rollback.sh` - Emergency deployment rollback
- `./scripts/fix-build-errors.sh` - Common build error fixes

### BugBot Scripts
- `./scripts/bugbot-local-monitor.js` - Local development environment monitoring
- `./scripts/bugbot-post-deploy-check.js` - Post-deployment validation
- `.github/workflows/bugbot-integration.yml` - GitHub Actions integration

### Deployment Scripts
- `./scripts/deploy-production-now.sh` - Simple production deployment
- `./scripts/deploy-production-final.sh` - Robust production deployment
- `./scripts/deploy-staging-backend.sh` - Staging backend deployment
- `./scripts/deploy-staging-automated.sh` - Automated staging deployment

### Monitoring Scripts
- `./scripts/monitoring/deployment-health-monitor.js` - Deployment health monitoring
- `./scripts/monitoring/comprehensive-health-check.js` - Comprehensive health checks
- `./scripts/monitoring/performance-monitor.js` - Performance monitoring

## üö® Build Error Prevention Workflow

### Pre-Deployment Validation (MANDATORY)
```bash
# 1. Environment validation
npm run validate:environments

# 2. Schema validation
npm run validate-schema-comprehensive

# 3. Local build test
npm run pre-deploy:build

# 4. TypeScript validation
npm run pre-deploy:typescript

# 5. Complete validation
npm run pre-deploy:full

# 6. BugBot validation
npm run bugbot:pre-deploy
```

### Common Build Error Fixes
```bash
# Fix npm ci failures
npm cache clean --force
rm -rf node_modules package-lock.json
npm install

# Fix port conflicts
./scripts/kill-local-servers.sh
./scripts/start-dev-stable.sh

# Fix environment variable issues
npm run sync:env-examples
npm run validate:environments

# Fix Railway CLI issues
railway logout && railway login
railway link --project novara-mvp --environment staging --yes
```

## Script Features
- **Non-hanging scripts**: All scripts terminate properly with timeouts
- **Safety-first scripts**: Built-in validation and error handling
- **Environment-aware**: Automatically detect and use correct environment
- **Comprehensive logging**: Detailed logs for debugging and monitoring
- **Build error prevention**: Pre-deployment validation and testing
- **Emergency recovery**: Rollback and recovery procedures
