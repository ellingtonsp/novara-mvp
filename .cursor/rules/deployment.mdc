
# Deployment Rules & Safety

## **CRITICAL NO-INTERACTION REQUIREMENTS**
- **NEVER run `railway environment`** - this requires manual selection
- **NEVER run `railway link` without full parameters** - this requires manual selection
- **NEVER ask user to manually select environments**
- **ALWAYS use automated deployment scripts** that handle environment selection
- **ALWAYS use `--yes` flag** when available to skip prompts
- **ALWAYS specify full project/environment/service parameters**

## **üö® CRITICAL RAILWAY DEPLOYMENT RULES**

### **‚úÖ MANDATORY RAILWAY DEPLOYMENT METHOD**
**ONLY use CLI deployment from backend directory:**
```bash
cd backend && railway up
```

**NEVER use auto-deployments** with railway.json startCommand - they fail consistently.
**NEVER deploy from project root** with `railway up` - causes "Could not find root directory: backend"

### **üéØ WHY CLI METHOD WORKS**
- **Directory Context**: Railway CLI runs from backend directory where server.js exists
- **No Configuration Conflicts**: Avoids railway.json startCommand issues
- **Direct Control**: Bypasses Railway's auto-deployment system that fails
- **Consistent Results**: Same method works every time

### **üö® FORBIDDEN RAILWAY ACTIONS**
- ‚ùå Don't deploy from project root with `railway up`
- ‚ùå Don't rely on railway.json startCommand for auto-deployments
- ‚ùå Don't ignore the CLI method that works
- ‚ùå Don't make direct commits to main branch (violates cursor rules)

### **üîß RAILWAY CONFIGURATION FIX**
**Fixed railway.json** - Remove conflicting `cd backend`:
```json
{
  "deploy": {
    "startCommand": "node server.js",  // ‚úÖ REMOVED cd backend
    "healthcheckPath": "/api/health",
    "healthcheckTimeout": 600
  }
}
```

### **üéØ WHY THIS FIXES DAILY ISSUES**
- **Before**: Auto-deployments used railway.json ‚Üí Failed with "Could not find root directory: backend"
- **After**: CLI deployments from backend directory ‚Üí Always succeed
- **Root Cause**: Dockerfile copies backend to `/app`, railway.json tried to `cd backend` again
- **Solution**: Use CLI method that respects Dockerfile working directory

### **üö® RAILWAY EMERGENCY RECOVERY**
If Railway deployment fails with "Could not find root directory: backend":
```bash
# 1. Check current status
railway status

# 2. Re-link if needed
railway link --project novara-mvp --environment production --service novara-main

# 3. Deploy using the ONLY method that works
cd backend && railway up

# 4. Verify deployment
curl -s https://novara-mvp-production.up.railway.app/api/health
```

### **üìã RAILWAY DEPLOYMENT CHECKLIST**
- [ ] **ALWAYS use**: `cd backend && railway up`
- [ ] **NEVER use**: Auto-deployments or project root deployment
- [ ] **Verify Railway link**: `railway status` shows correct project/environment/service
- [ ] **Test health endpoint**: `curl -s https://novara-mvp-production.up.railway.app/api/health`
- [ ] **Check logs**: `railway logs` to confirm server started
- [ ] **Follow branch strategy**: Never commit directly to main

### **üéØ KEY RAILWAY DEPLOYMENT LESSONS LEARNED**
1. **Configuration Conflicts**: Dockerfile and railway.json can conflict
2. **CLI Method Works**: `cd backend && railway up` is the ONLY reliable method
3. **Auto-Deployments Fail**: railway.json startCommand causes "Could not find root directory: backend"
4. **Directory Context Matters**: Railway CLI must run from backend directory
5. **Branch Strategy Violations**: Direct commits to main are forbidden
6. **Emergency Recovery**: Always re-link and use CLI method for recovery

## **üîß ENHANCED RAILWAY CLI PROCEDURES**
```bash
# ‚úÖ CORRECT - No user interaction required
railway link --project novara-mvp --environment staging --service novara-backend-staging --yes
railway up --service novara-backend-staging

# ‚ùå FORBIDDEN - Requires manual selection
railway environment
railway link
railway up
```

## **AUTOMATED DEPLOYMENT SCRIPTS**
- **Staging**: `./scripts/deploy-staging-automated.sh`
- **Production**: `./scripts/deploy-production-automated.sh`
- **NEVER bypass these scripts** unless emergency rollback required

<<<<<<< HEAD
## **Critical Deployment Rules**
=======
## **üîç ENHANCED VALIDATION STEPS**

### **Pre-Deployment Checklist (EXPANDED)**
- [ ] Code changes tested locally
- [ ] Environment variables configured correctly
- [ ] Database schema compatible
- [ ] Rate limiting configured for target environment
- [ ] Health checks passing locally
- [ ] Automated deployment script ready
- [ ] **Docker build tested locally**
- [ ] **TypeScript compilation successful**
- [ ] **Frontend build successful**
- [ ] **BugBot validation passed**
- [ ] **Environment variable validation passed**

### **üö® RAILWAY-SPECIFIC PRE-DEPLOYMENT**
- [ ] Verify Railway CLI: `railway --version`
- [ ] Check authentication: `railway whoami`
- [ ] Verify project link: `railway status`
- [ ] Follow branch strategy (development ‚Üí staging ‚Üí main)
- [ ] **Use CLI method**: `cd backend && railway up`
- [ ] **Test health endpoint**: `curl https://novara-mvp-production.up.railway.app/api/health`

### **Post-Deployment Validation (EXPANDED)**
- [ ] Health endpoint responding
- [ ] Environment correctly identified
- [ ] Rate limiting working as expected
- [ ] Database operations successful
- [ ] Frontend connecting to backend
- [ ] No critical errors in logs
- [ ] BugBot validation passed: `npm run bugbot:post-deploy {environment}`
- [ ] **Docker container health check passed**
- [ ] **API endpoints responding correctly**
- [ ] **Frontend accessibility verified**
- [ ] **Database connectivity confirmed**

## **üõ†Ô∏è BUILD ERROR RECOVERY**

### **Common Build Failures & Fixes**
```bash
# 1. npm ci failures
npm cache clean --force
rm -rf node_modules package-lock.json
npm install

# 2. Port conflicts
./scripts/kill-local-servers.sh
./scripts/start-dev-stable.sh

# 3. Environment variable issues
npm run sync:env-examples
npm run validate:environments

# 4. Railway CLI issues
railway logout && railway login
railway link --project novara-mvp --environment staging --yes
```

### **Emergency Procedures**
- **Build Failure**: Use Railway dashboard to check build logs
- **Deployment Failure**: Use `./scripts/emergency-rollback.sh`
- **Database Issues**: Check environment variables and database connectivity
- **Rate Limiting**: Verify environment-specific limits are applied correctly

## **üìä DEPLOYMENT MONITORING**

### **Real-time Monitoring**
```bash
# Monitor deployment progress
npm run monitor:deployments

# Track deployment metrics
npm run track:deployments

# Health check all environments
npm run health-check
```

### **Alerting & Notifications**
- **Build Failures**: Immediate notification via GitHub Actions
- **Deployment Failures**: Automatic rollback and issue creation
- **Health Check Failures**: Alert team via configured channels

## **üîß Critical Deployment Rules**
>>>>>>> f6b5703 (docs: Update Railway deployment rules and documentation to reflect successful CLI method)
- **NEVER bypass staging ‚Üí production workflow**
- **ALWAYS verify Railway context before deployment**
- **ALWAYS get explicit user approval for production changes**
- **ALWAYS run health checks after deployment**

## **üéØ KEY RAILWAY DEPLOYMENT LESSONS LEARNED**
1. **Configuration Conflicts**: Dockerfile and railway.json can conflict
2. **CLI Method Works**: `cd backend && railway up` is the ONLY reliable method
3. **Auto-Deployments Fail**: railway.json startCommand causes "Could not find root directory: backend"
4. **Directory Context Matters**: Railway CLI must run from backend directory
5. **Branch Strategy Violations**: Direct commits to main are forbidden
6. **Emergency Recovery**: Always re-link and use CLI method for recovery

## **Environment-Specific Database IDs**
- **Staging**: `appEOWvLjCn5c7Ght`
- **Production**: `app5QWCcVbCnVg2Gg`
- **Local**: SQLite file at `backend/data/novara-local.db`

## **Database Validation Steps**
1. Check `AIRTABLE_BASE_ID` matches environment
2. Verify `NODE_ENV` is set correctly
3. Confirm `USE_LOCAL_DATABASE=true` for local development
4. Test database connectivity

## **Local Development**
```bash
# Use SQLite for local development
USE_LOCAL_DATABASE=true npm run local

# Database file location
backend/data/novara-local.db
```

## **Troubleshooting**
- If database errors occur, check environment variables
- Verify database permissions for SQLite file
- Ensure proper database isolation between environments

## **Emergency Procedures**
- **Rollback**: Use Railway dashboard to revert to previous deployment
- **Database Issues**: Check environment variables and database connectivity
- **Rate Limiting**: Verify environment-specific limits are applied correctly

## **Pre-Deployment Checklist**
- [ ] Code changes tested locally
- [ ] Environment variables configured correctly
- [ ] Database schema compatible
- [ ] Rate limiting configured for target environment
- [ ] Health checks passing locally
- [ ] Automated deployment script ready

## **Post-Deployment Validation**
- [ ] Health endpoint responding
- [ ] Environment correctly identified
- [ ] Rate limiting working as expected
- [ ] Database operations successful
- [ ] Frontend connecting to backend
- [ ] No critical errors in logs
- [ ] BugBot validation passed: `npm run bugbot:post-deploy {environment}`

## **BugBot Integration**
- **Pre-Deployment**: Always run `npm run bugbot:pre-deploy` before staging/production
- **Post-Deployment**: Always run `npm run bugbot:post-deploy {environment}` after deployment
- **Local Development**: Run `npm run bugbot:local` to check environment setup
- **Continuous Monitoring**: Use `npm run bugbot:monitor` for ongoing validation
- **GitHub Issues**: BugBot automatically creates issues for deployment failures
- **Reports**: Check generated markdown reports for detailed analysis
