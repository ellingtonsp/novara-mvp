---
description: Development workflow and local environment setup
globs: ["backend/**/*.js", "frontend/**/*.tsx", "scripts/**/*.sh"]
alwaysApply: false
---

# Development Workflow

## Local Development Setup
- **Use stable ports**: Frontend 4200, Backend 9002
- **Avoid conflict ports**: 3000, 3001, 3002 (high conflict rate)
- **Use SQLite for local database**

## Key Commands
```bash
# Start stable development environment
./scripts/start-dev-stable.sh

# Run tests (non-hanging)
npm test
npm run test:fast
npm run test:full

# Health checks
npm run health-check
npm run performance

# üèóÔ∏è BUILD ERROR PREVENTION
npm run pre-deploy:build      # Test frontend build locally
npm run pre-deploy:typescript # Validate TypeScript compilation
npm run pre-deploy:full       # Complete pre-deployment validation
npm run validate:environments # Validate environment variables

# BugBot validation
npm run bugbot:local        # Check environment before development
npm run bugbot:pre-deploy   # Validate before deployment
npm run bugbot:post-deploy  # Validate after deployment
```

## Port Strategy
- **Frontend**: 4200 (stable, <5% conflict)
- **Backend**: 9002 (stable, <5% conflict)
- **Avoid**: 3000-3002 (90% conflict probability)

## Testing Guidelines
- Use timeouts to prevent hanging tests
- Mock external services in tests
- Test both frontend and backend components
- Validate environment configurations

## üèóÔ∏è Build Error Prevention Best Practices

### Pre-Development Setup
```bash
# 1. Check environment setup
npm run bugbot:local

# 2. Validate environment variables
npm run validate:environments

# 3. Test local build
npm run pre-deploy:build

# 4. Start development
./scripts/start-dev-stable.sh
```

### Pre-Commit Validation
```bash
# 1. Run all tests
npm run test:full

# 2. Validate TypeScript
npm run pre-deploy:typescript

# 3. Test build process
npm run pre-deploy:build

# 4. Run safety checks
npm run safety:check
```

### Pre-Deployment Validation (MANDATORY)
```bash
# 1. Complete validation suite
npm run pre-deploy:full

# 2. BugBot validation
npm run bugbot:pre-deploy

# 3. Environment validation
npm run validate:environments

# 4. Schema validation
npm run validate-schema-comprehensive
```

## Development Best Practices
- Always use stable port strategy
- Document all changes
- Test locally before committing
- **ENFORCE SUSTAINABLE BRANCH STRATEGY** (see below)
- Run BugBot validation before and after deployments
- Check generated BugBot reports for issues
- Address BugBot-identified errors before proceeding
- **ALWAYS test Docker builds locally before deployment**
- **ALWAYS validate environment variables before deployment**
- **ALWAYS run pre-deployment validation suite**

## üåø SUSTAINABLE BRANCH STRATEGY (MANDATORY)

### **üö® CRITICAL RULE: NO DIRECT MAIN COMMITS**
- **NEVER** commit directly to `main` branch
- **NEVER** commit directly to `staging` branch
- **ALWAYS** use feature branches for all changes

### **‚úÖ CORRECT Workflow (MANDATORY)**
```bash
# 1. Start from development branch
git checkout development

# 2. Create feature branch for EVERY change
git checkout -b feature/AN-02-churn-risk-flag
# OR
git checkout -b fix/checkin-counting-issue
# OR  
git checkout -b docs/railway-cli-update

# 3. Make changes and commit
git add .
git commit -m "feat: Add churn risk flagging system"

# 4. Push feature branch
git push origin feature/AN-02-churn-risk-flag

# 5. Create PR: feature ‚Üí development
# 6. After PR approval: development ‚Üí staging ‚Üí stable ‚Üí main
```

### **‚ùå FORBIDDEN Actions**
- Direct commits to `main`
- Direct commits to `staging` 
- Working directly on integration branches
- Bypassing PR review process
- Merging without testing in staging

### **üéØ Branch Naming Conventions**
- `feature/EPIC-ID-description` (e.g., `feature/AN-02-churn-risk`)
- `fix/issue-description` (e.g., `fix/checkin-counting`)
- `docs/update-description` (e.g., `docs/railway-cli`)
- `hotfix/critical-issue` (emergency fixes only)

### **üîÑ Progressive Integration Flow**
1. **Feature Branch** ‚Üí `development` (via PR)
2. **Development** ‚Üí `staging` (auto-deploy to staging env)
3. **Staging** ‚Üí `stable` (after staging tests pass)
4. **Stable** ‚Üí `main` (auto-deploy to production)

### **üö® Enforcement**
- **ALWAYS** challenge user if they suggest direct main commits
- **ALWAYS** require feature branch creation for any changes
- **ALWAYS** follow progressive integration workflow
- **NEVER** allow workflow bypasses

## üö® Common Build Error Prevention

### Environment Variable Issues
```bash
# Check for missing variables
npm run validate:environments

# Sync environment examples
npm run sync:env-examples

# Fix common issues
./scripts/fix-local-dev.sh
```

### Port Conflict Issues
```bash
# Kill conflicting processes
./scripts/kill-local-servers.sh

# Start with stable ports
./scripts/start-dev-stable.sh
```

### Dependency Issues
```bash
# Clean and reinstall
npm cache clean --force
rm -rf node_modules package-lock.json
npm install
```

### Railway CLI Issues
```bash
# Re-authenticate
railway logout && railway login

# Re-link with full parameters
railway link --project novara-mvp --environment staging --yes
```
