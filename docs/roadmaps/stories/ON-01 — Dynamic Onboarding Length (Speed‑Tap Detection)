## **1 Overview**

Pilot testing shows a subset of users race through onboarding and abandon when faced with multiple sliders and questions. This story introduces a **speed-tap detector** that shortens onboarding to a 3-field “fast lane” when users tap through >3 inputs in under 10 s. Goal: uplift completion rate among time-sensitive users without harming those who prefer the full flow.

Deliverables

1. **Tap-rate heuristic** that classifies a session as *fast* or *standard* in real time.
2. **Abbreviated onboarding path** with three required fields (email, cycle stage, biggest concern).
3. **Analytics events** to measure path selection and completion.

---

## **2 User Story**

| **Role** | **Need** | **Benefit** |
| --- | --- | --- |
| Speed-tapper (Alex archetype) | Skip lengthy onboarding questions when they’re in a hurry | Less friction → higher completion and first check-in |

---

## **3 Acceptance Criteria**

## **(Done = all true)**

1. **Detection rule**: if user performs ≥3 taps/inputs in any 10-second rolling window *before* reaching screen 3, flag as fast_onboard = true.
2. When flagged, app **immediately navigates** to abbreviated flow (3 required fields). Total time-to-completion ≤30 s median.
3. Standard users see no change; full flow unaffected.
4. Events fired:
    - onboarding_path_selected { path: 'fast' | 'standard' }
    - onboarding_completed { path, completion_ms }
5. Fast-path users show ≥10 % improvement in onboarding completion vs. baseline within 1-week A/B.
6. Unit tests cover boundary cases (e.g., 3 taps in 9.9 s = fast; 3 taps in 10.1 s = standard).
7. No Core Web Vitals regressions (LCP, CLS unchanged ±5 %).

---

## **4 Success Metrics**

| **Metric** | **Baseline** | **Target** |
| --- | --- | --- |
| Overall onboarding completion | 72 % | **≥80 %** |
| Completion for fast-path cohort | 60 % | **≥70 %** |
| Avg onboarding time (fast users) | 45 s | **≤30 s** |

---

## **5 Technical Approach**

### **5.1 Heuristic**

```
let tapTimes: number[] = [];
function recordTap() {
  tapTimes.push(Date.now());
  tapTimes = tapTimes.filter(t => Date.now() - t <= 10000);
  if (tapTimes.length >= 3 && currentStep < 3) {
    triggerFastPath();
  }
}
```

### **5.2 Fast Path UI**

- Render as separate **FastOnboarding.tsx** component.
- Fields: email, cycle_stage (select), primary_concern (select).
- Display copy: “Short on time? No problem—just give us the basics.”
- After submit ➜ proceed to **Welcome** screen (same as standard flow).

### **5.3 Routing Logic**

| **Condition** | **Route** |
| --- | --- |
| fast_onboard === true | /onboard/fast |
| else | /onboard/standard |

### **5.4 Analytics Integration**

```
track('onboarding_path_selected', { path: fast ? 'fast' : 'standard', environment });
track('onboarding_completed', { path, completion_ms, environment });
```

---

## **6 Data & Privacy**

- No additional PII collected.
- fast_onboard flag stored only in analytics payload; not persisted server-side.

---

## **7 Testing Plan**

| **Test** | **Tool** | **Pass Criteria** |
| --- | --- | --- |
| Unit heuristic | Jest | Edge timestamps classify correctly |
| UI fast path | Cypress | Trigger fast taps → fast component rendered |
| Performance | Lighthouse | CLS & LCP within 5 % of baseline |

---

## **8 Dependencies**

| **Dependency** | **Status** |
| --- | --- |
| track() util from AN-01 | ✅ |
| Route guards in React Router | ✅ |

---

## **9 Risks & Mitigations**

| **Risk** | **Likelihood** | **Mitigation** |
| --- | --- | --- |
| False positives (power users tapping slowly) | Low | Require >3 taps within <8-10 s; tweak window after data review |
| Confusion switching flows mid-stream | Medium | Show transitional toast: “We’ve streamlined these last questions.” |

---

## **10 Definition of Done Checklist**

- Heuristic implemented and unit-tested.
- FastOnboarding UI styling complete.
- Analytics events visible in PostHog.
- A/B flag enabled to measure uplift.
- Docs in /docs/onboarding/ON-01.md.

---

> Next:
>